# -*- coding: utf-8 -*-
"""Project3_Lauren_Liberati_Afework_Berga.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15PnhpogaCXgcVbDFvz8fuq4O5aR5RD3k
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive/')
# %cd /content/drive/
# %cd 'Shared drives/INST126F2020/Pod Documents/Pod6 Documents/Afework_Lauren'
#%cd 'Shared drives/INST126F20-ClassDataFiles'
#change 'x' to your Pod number
#%cd 'Pod Documents/Pod6 Documents'
!ls
#import os.path

#-- THIS PROGRAM SEARCHES FOR A WORD AND DISPLAYS THE SCORE BASED ON 
#-- THE PERCENTAGE OF OCCURENCE OF THE WORD 
#-- IT DISPLAYS AS FILE TITLE AND PERCENTAGE OF COUNTS (CHALLENGE "A" AND "B")
#ALSO AS A NOTE, WE HAVE TWO SETS OF COUNT FILES. THIS IS ON PURPOSE.
#"counts-" DISPLAYS RESULTS IN PERCENTAGE FORM (USED IN FIRST CODE BLOCK)
#"count-" DISPLAYS RESULTS IN WHOLE NUMBER FORM (USED IN SECOND CODE BLOCK)

#--TAKES FILENAME AND ACCESS INDICATOR RETURNS A LIST
list_of_file=[]
new_str =''
def openfile(filename, accessindicator):
    try:
      fileh= open(filename, 'r')
    except:
      return ('Error opening file: ' + filename)
    try:
      fileread= fileh.read()
      filelist= fileread.split(accessindicator)
      return filelist
    except:
      return ('Error reading file: ' + filename)

filename = openfile("fileindex.csv", ",")

#--RETURNS LIST OF FILE NAMES
def filename_list(filename):
  filename.remove(filename[0])
  file_names= []
  for item in filename:
    if ".txt" in item:
      file_names.append(item)
  return file_names

#-- PRODUCE LIST OF TITLES
def filetitle_list(filename):
  list1=[]
  list4=[]
  filename = openfile("fileindex.csv", ",")
  for item in filename:
    if '\n' in item:
      list1.append(item)
  for string in list1:
    list3 = string.split('\n') 
    list4 += list3
  for each in list4:
    if each == '':
      list4.remove(each)
    if each.isnumeric() == True:
      list4.remove(each)
  list4.remove(list4[0]) 
  return list4 

#--BUILD DICTIONARY
def new_dict(filename):
  filename = openfile("fileindex.csv", ",")
  new_dictionary = dict()
  new_dictionary1 = dict() 
  list_of_filename = filename_list(filename)
  list_of_titles = filetitle_list(filename)
  for file_name in list_of_filename:
    for title in list_of_titles:
      new_dictionary[file_name] = title
      list_of_titles.remove(title)
      break
  return new_dictionary 

new_dict(filename)

#--BUILD INVERTED INDEX
new_dictionary = new_dict(filename)
def inverted_index(word):
  inverted = {}
  for file_name in new_dictionary:
    count_file = open("counts-" + file_name)
    count_read = count_file.read()
    eval_count = eval(count_read)
    for word, count in eval_count:
      locations = inverted.setdefault(word, {})
      locations[new_dictionary[file_name]] = count
  return inverted

#--EXTRACT SPECIFIC DICTIONARY THAT CONTAINS A SEARCH WORD           
def extract_dict(searchword):
  inverted = inverted_index(searchword)
  for key in inverted:
    if key == searchword:
      return {key: inverted[key]}   

#--RETURNS A SORTED DICTIONARY OF TITLES AND COUNT FOR SPECIFIC WORD
def extract_mostvisited(searchword):
  inverted = inverted_index(searchword)
  if inverted == None:
    return None
  else:  
    for key in inverted:
      if key == searchword:
        return inverted[key]  

#--SORT A GIVEN DICTIONARY
def sorted_dict(inverted):
  if inverted != None:
    return {key: value for key,value in sorted(inverted.items(), 
                                             key=lambda item: item[1], 
                                             reverse = True)}      

#--LOOP THROUGH THE INVERTED INDEX AND SEARCH FOR A WORD
while True:
  searchword= input("Enter the word you want to search or done to exit: ")
  if searchword == "done":
    break
  else:
    ranked_list = extract_mostvisited(searchword.lower())
    print(sorted_dict(ranked_list))

#-- THIS PROGRAM ACCEPTS MANY WORDS AS A PHRASE, CHANGES THAT TO A LIST, AND AFTER 
#-- REMOVING THE NOISE WORDS IT GOES THROUGH THE LIST TO SEARCH FOR EACH WORD 
#-- KEEPING THE SCORES ON EACH WORD AND THE RESULTS ARE DISPLAYED AS FILE TITLE 
#-- AND THE TOTAL COUNTS IN WHOLE NUMBER FORM (CHALLENGE AND "A", "C", AND "D")

#--BUILD INVERTED INDEX
new_dictionary = new_dict(filename)
def inverted_index(word):
  inverted = {}
  for file_name in new_dictionary:
    count_file = open("count-" + file_name)
    count_read = count_file.read()
    eval_count = eval(count_read)
    for word, count in eval_count:
      locations = inverted.setdefault(word, {})
      locations[new_dictionary[file_name]] = count
  return inverted

#--FUNCTION TO MAKE NOISE LIST
noise= open("noise-words.txt", "r")
def noise_file_to_list(noise):
  noiselist= noise.read().splitlines()
  return noiselist
noiselist= noise_file_to_list(noise)

#--FUNCTION TO REMOVE NOISE WORDS 
def remove_noise_words(testsentence, noiselist):
  testsentence= testsentence.lower()
  testsentence= testsentence.split()
  outputlist= []
  for word in testsentence:
    if word not in noiselist:
      outputlist.append(word)
  newsentence= ""
  for word in outputlist:
    newsentence += word + " "
  return newsentence 

#--FUNCTION TO REMOVE BAD CHARACTERS 
def remove_char(stringtoclean, charlist):
  for i in charlist:
    if i in stringtoclean:
      stringtoclean= stringtoclean.replace(i, " ")
  return stringtoclean   

#--EXTRACT SPECIFIC DICTIONARY THAT CONTAINS THE SEARCH WORDS THAT ARE TO BE SPLIT
#--INTO A LIST THEN EACH WORD IN THE LIST IS SEARCHED TO PRODUCE SUM OF RESULTS           
def extract_dict(searchword):
  final_dic = {}
  listofuncleanwords = remove_noise_words(searchword, noiselist)
  listofwords = listofuncleanwords.split()
  for word in listofwords:
    extracted = extract_mostvisited(word)
    if extracted != None:
      for key in extracted:
        if key not in final_dic:
          final_dic[key] = extracted[key]
        else:
          value1 = extracted.get(key)
          value2 = final_dic.get(key)
          final_dic[key] = value1 + value2
  return final_dic    

#--LOOP THROUGH THE INVERTED INDEX AND SEARCH FOR A WORD
while True:
  searchword= input("Enter the words as a phrase or done to exit: ")
  if searchword == "done":
    break
  else:
    ranked_list = extract_dict(searchword)
    print(sorted_dict(ranked_list))